#!/usr/bin/python3
import sys
import argparse
import os
import re

class ClangWrapper:
    verbose = False
    disableOptimize = True
    
    objfile = ''
    cfile = ''
    cbase = ''
    ctmp = ''
    ctmpbase = ''
    mode = None
    messages = []

    def parse(this,argv):
        newargv1 = []
        newargv2 = []
        this.argv_without_Iopt = []
        i = 0
        o_index = -2
        for s in argv:
            pattern = re.compile('^-print-prog-name.+')
            if '-o' == s:
                o_index = i
            elif i == (o_index+1):
                this.objfile = s # xxxx.o filename
            else:
                newargv1.append(s)
            if '-c' == s:
                this.mode = 'c'
            if '-E' == s:
                this.mode = 'E'
            if pattern.match(s):
                this.mode = 'PPN'
            i = i + 1
        for s in newargv1:
            optstr = ''
            if 2 <= len(s):
                optstr = s[:2]
            path, ext = os.path.splitext(s)
            if '.cpp' == ext or '.c' == ext or '.c++' == ext:
                this.cfile = s    # c source filename
                this.cbase = path # c source filename
                this.ctmp     = '/tmp/' + os.path.basename(s)
                this.ctmpbase = '/tmp/' + os.path.basename(path)
            else:
                newargv2.append(s)
                if '-I' != optstr:
                    this.argv_without_Iopt.append(s)
        if this.cfile != '' and o_index < 0:
            this.objfile = this.cbase + '.o'
        this.argv_without_objfile  = newargv1
        this.argv_without_bothfile = newargv2

    def modifyOptions(this,argv):
        newargv = []
        for s in argv:
            if this.disableOptimize:
                if '-O1' == s:
                    s = '-O0'
                if '-O2' == s:
                    s = '-O0'
                if '-O3' == s:
                    s = '-O0'
            newargv.append(s)
        return newargv

    def printMessages(this):
        print('mode      :{}'.format(this.mode))
        print('cfile     :{}'.format(this.cfile))
        print('cbase     :{}'.format(this.cbase))
        print('ctmp      :{}'.format(this.ctmp))
        print('ctmpbase  :{}'.format(this.ctmpbase))
        print('objfile   :{}'.format(this.objfile))
        print('newargv1  :{}'.format(this.argv_without_objfile))
        print('newargv2  :{}'.format(this.argv_without_bothfile))
        print('arg wo opt:{}'.format(this.argv_without_Iopt))
        for mes in this.messages:
            print(mes)

    def join_argv(this,argv):
        newargv = []
        for s in argv:
            s = s.replace('"', "\\\"")
            newargv.append(s)
        return ' '.join(newargv)

    def emitLL(this):
        cmd = 'clang-4.0 -S -emit-llvm -o {}.ll {}'.format(this.ctmpbase, 
                                                           this.join_argv(this.argv_without_objfile))
        this.messages.append('cmd       :{}'.format(cmd))
        return os.system(cmd)

    def compileLL(this):
        cmd1 = 'llvm-cbe {}.ll -o {}'.format(this.ctmpbase,this.ctmp)
        cmd2 = 'gcc {} {} -o {}'.format(this.join_argv(this.argv_without_Iopt),
                                        this.ctmp,
                                        this.objfile)
        this.messages.append('cmd1      :{}'.format(cmd1))
        ret = os.system(cmd1)
        if 0 != ret:
            return ret
        this.messages.append('cmd2      :{}'.format(cmd2))
        return os.system(cmd2)

    def compile(this,argv):
        if this.mode == 'E' or this.mode == None or this.mode == 'PPN':
            cmd = 'gcc {}'.format(this.join_argv(argv))
            this.messages.append('cmd       :{}'.format(cmd))
            return os.system(cmd)
        else:
            ret = this.emitLL()
            if 0 != ret:
                return ret
            ret = this.compileLL()
            return ret
            
def main(argv):
    if 1 > len(argv):
        print('usage: clang-cbe [options] [xxx.cpp]')
    else:
        clang = ClangWrapper()
        argv.pop(0)
        argv = clang.modifyOptions(argv)
        clang.parse(argv)
        ret = clang.compile(argv)
        if 0 != ret:
            clang.printMessages()
        return ret

if __name__ == '__main__':
    sys.exit(main(sys.argv))
